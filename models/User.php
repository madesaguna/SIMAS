<?php

namespace app\models;

use Yii;
use yii\db\ActiveRecord;
use Imagine\Image\Box;
use yii\imagine\Image;
use yii\web\IdentityInterface;
use app\models\helpers\UrlHelper;
use yii\web\UploadedFile;

class User extends ActiveRecord implements IdentityInterface
{
    public $upload_pic;
    public $password;
    public $profileRoot;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->profileRoot = Yii::getAlias('@userprofileroot');
    }

    public static function tableName()
    {
        return 'user';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['username', 'password', 'first_name', 'last_name', 'phone_number', 'email', 'user_level'], 'required'],
            ['email', 'email'],
            ['email', 'string', 'max' => 255],
            [
                ['upload_pic'],
                'image',
                //'mimeTypes' => 'image/*',
                'extensions' => ['png', 'jpg', 'gif', 'jpeg'],
                //'maxWidth' => 300,
                //'maxHeight' => 200,
                'maxSize' => 720 * 1024,
                'skipOnEmpty' => true,
                //'notImage' => 'Not Image',
            ],
        ];
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios['update_form_data'] = ['email', 'first_name', 'last_name', 'upload_pic', 'phone_number'];
        $scenarios['update_form_data_admin'] = ['email', 'first_name', 'last_name', 'upload_pic', 'phone_number', 'user_level'];
        return $scenarios;
    }

    public static function getUserLevels()
    {
        return ['super_admin' => 'Super Admin', 'admin' => 'Admin',];
    }

    public function getSelectedUserLevel()
    {
        $userLevels = self::getUserLevels();
        return $userLevels[$this->user_level];
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id,]);
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * Finds user by username
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username,]);
    }

    /**
     * Finds user by password reset token
     *
     * @param string $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token,
        ]);
    }

    /**
     * Finds out if password reset token is valid
     *
     * @param string $token password reset token
     * @return bool
     */
    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int)substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['user.passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }

    /**
     * {@inheritdoc}
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }

    /**
     * {@inheritdoc}
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * {@inheritdoc}
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password_hash);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }

    public function getProfileUrl()
    {
        $_img = ($this->user_image === NULL || $this->user_image === '') ? 'unknown.png' : $this->user_image;
        return Yii::getAlias('@userprofileurl/' . $_img);
    }

    public function beforeValidate()
    {
        // check is uploaded
        $this->upload_pic = UploadedFile::getInstance($this, 'upload_pic');
        if (!empty($this->upload_pic)) {
            $filePicName = $this->generateFileName($this->profileRoot, $this->username, $this->upload_pic->extension);
            $this->user_image = $filePicName;
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {

        // check is directory or create one if not exist
        is_dir($this->profileRoot) || mkdir($this->profileRoot, 0755, true);
        // if the picture was sent to server
        if (!empty($this->upload_pic)) {
            $filePicName = $this->user_image;
            $filePicPath = $this->profileRoot . DIRECTORY_SEPARATOR . $filePicName;
            Image::getImagine()
                ->open($this->upload_pic->tempName)
                ->thumbnail(new Box(180, 180))
                ->save($filePicPath, ['quality' => 100]);
        }
        return parent::afterSave($insert, $changedAttributes);
    }

    public function afterDelete()
    {
        parent::afterDelete(); // TODO: Change the autogenerated stub
        $filepath = Yii::getAlias($this->profileRoot . DIRECTORY_SEPARATOR . $this->user_image);
        if (file_exists($filepath)) {
            unlink($filepath);
        }
    }

    protected function generateFileName($directory, $name, $extension, $security = true)
    {
        $name = strip_tags($name);
        $fileString = strtolower(UrlHelper::generateUrl($name, $extension, '_', $security));
        if (file_exists($directory . DIRECTORY_SEPARATOR . $fileString)) {
            $fileString = $this->generateFileName($directory, $name, $extension, $security);
        }
        return $fileString;
    }

}